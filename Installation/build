#!/bin/zsh

dev_account="ranganath.atreya@gmail.com"
dev_team="7JZ87Y4JWT"
dev_keychain_label="Developer-altool"

# functions
requeststatus() { # $1: requestUUID
    requestUUID=${1?:"need a request UUID"}
    req_status=$(xcrun altool --notarization-info "$requestUUID" \
                              --username "$dev_account" \
                              --password "@keychain:$dev_keychain_label" 2>&1 \
                 | awk -F ': ' '/Status:/ { print $2; }' )
    echo "$req_status"
}

notarizefile() { # $1: path to file to notarize, $2: identifier
    filepath=${1:?"need a filepath"}
    identifier=${2:?"need an identifier"}

    # if app then zip before uploading
    filename=$(basename -- "$filepath")
    if [[ ${filename##*.} == "app" ]]; then
        ditto -c -k --keepParent "$filename" "${filename%.*}.zip"
        filename="${filename%.*}.zip"
    fi
    
    # upload file
    echo "## uploading $filepath for notarization"
    requestUUID=$(xcrun altool --notarize-app \
                               --primary-bundle-id "$identifier" \
                               --username "$dev_account" \
                               --password "@keychain:$dev_keychain_label" \
                               --asc-provider "$dev_team" \
                               --file "${filename}" 2>&1 \
                  | awk '/RequestUUID/ { print $NF; }')
                               
    echo "Notarization RequestUUID: $requestUUID"
    
    if [[ $requestUUID == "" ]]; then
        echo "could not upload for notarization"
        exit 1
    fi
        
    # wait for status to be not "in progress" any more
    request_status="in progress"
    while [[ "$request_status" == "in progress" ]]; do
        echo -n "waiting... "
        sleep 10
        request_status=$(requeststatus "$requestUUID")
        echo "$request_status"
    done
    
    # print status information
    xcrun altool --notarization-info "$requestUUID" \
                 --username "$dev_account" \
                 --password "@keychain:$dev_keychain_label"
    echo
    
    if [[ $request_status != "success" ]]; then
        echo "## could not notarize $filepath"
        exit 1
    fi
    
    # staple result
    echo "## Stapling $filepath"
    xcrun stapler staple "$filepath"
}

rm -rf ./LipikaIME.app
rm -rf ./LipikaIME.zip
rm -rf ./LipikaApp.app
rm -rf ./LipikaApp.zip
rm -rf ./LipikaIME.pkg
rm ./Scripts/installer
if [[ "$1" == "clean" ]]; then 
exit 0
fi

xcodebuild -project ../../lipika-engine/LipikaEngine.xcodeproj -scheme "LipikaEngine_OSX" -configuration Debug clean build test || exit 1
xcodebuild -project ../../lipika-engine/LipikaEngine.xcodeproj -scheme "LipikaEngine_OSX" -configuration Release clean build || exit 1
rm -rf ../Input\ Source/LipikaEngine_OSX.framework
cp -R ../../lipika-engine/build/Release/LipikaEngine_OSX.framework ../Input\ Source/
xcodebuild -project ../LipikaIME.xcodeproj -scheme LipikaIME -configuration Release clean build || exit 1
cp -R ../build/Release/LipikaIME.app .
notarizefile "LipikaIME.app" "com.daivajnanam.inputmethod.Lipika"

xcodebuild -project ../../ShortcutRecorder/ShortcutRecorder.xcodeproj -scheme "ShortcutRecorder.framework" -configuration Release clean build || exit 1
rm -rf ../Application/ShortcutRecorder.framework
cp -R ../../ShortcutRecorder/build/Release/ShortcutRecorder.framework ../Application/
xcodebuild -project ../LipikaIME.xcodeproj -scheme LipikaApp -configuration Release clean build || exit 1
cp -R ../build/Release/LipikaApp.app .
notarizefile "LipikaApp.app" "com.daivajnanam.LipikaApp"

xcodebuild -project ../LipikaIME.xcodeproj -scheme Installer -configuration Release clean build  || exit 1
cp ../build/Release/installer ./Scripts/
packagesbuild -v LipikaIME.pkgproj
notarizefile "LipikaIME.pkg" "com.daivajnanam.LipikaApp"

exit 0
